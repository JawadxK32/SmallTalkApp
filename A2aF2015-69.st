BorderedMorph subclass: #LOGame	instanceVariableNames: 'cells'	classVariableNames: ''	poolDictionaries: ''	category: 'A2aF2015-#69'!!LOGame methodsFor: 'all' stamp: 'PietroAndreoli 10/2/2015 14:27'!toggleNeighboursOfCellAt: i at: j	(i > 1) ifTrue: [ (cells at: i - 1 at: j ) toggleState].	(i < self cellsPerSide) ifTrue: [ (cells at: i + 1 at: j) toggleState].	(j > 1) ifTrue: [ (cells at: i at: j - 1) toggleState].	(j < self cellsPerSide) ifTrue: [ (cells at: i at: j + 1) toggleState]! !!LOGame methodsFor: 'all' stamp: 'PietroAndreoli 10/2/2015 14:25'!cellsPerSide	^10! !!LOGame methodsFor: 'all' stamp: 'PietroAndreoli 10/2/2015 14:26'!newCellAt:i at: j	"Create a cell for position (i,j) and add it to my on-screen representation 	at the appropriate screen position. Answer the new cell"	| c origin |	c := LOCell new.	origin := self innerBounds origin.	self addMorph: c.	c position: ((i - 1) * c width) @ ((j - 1) * c height) + origin.	c mouseAction: [self toggleNeighboursOfCellAt: i at: j].	^c! !!LOGame methodsFor: 'all' stamp: 'PietroAndreoli 10/2/2015 14:25'!initialize	| sampleCell width height n |	super initialize.	n := self cellsPerSide.	sampleCell := LOCell new.	width := sampleCell width.	height := sampleCell height.	self bounds: (5@5 extent: ((width*n) @(height*n)) + (2 * self borderWidth)). 	cells := Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ]! !SimpleSwitchMorph subclass: #LOCell	instanceVariableNames: 'mouseAction'	classVariableNames: ''	poolDictionaries: ''	category: 'A2aF2015-#69'!!LOCell methodsFor: 'all' stamp: 'PietroAndreoli 10/2/2015 14:27'!mouseUp: anEvent	mouseAction value! !!LOCell methodsFor: 'all' stamp: 'PietroAndreoli 10/2/2015 14:26'!mouseAction: aBlock	mouseAction := aBlock! !!LOCell methodsFor: 'all' stamp: 'PietroAndreoli 10/2/2015 14:23'!initialize	super initialize.	self label: ''.	self borderWidth: 2.	bounds := 0@0 corner: 16@16. 	offColor := Color paleYellow. 	onColor := Color paleBlue darker. 	self useSquareCorners.	self turnOff! !